// Generated by Skyramp v0.5.0.1c45d2eb on 2025-10-24 15:44:48.779432 -0700 PDT m=+2370.747762668
// Command: skyramp generate ui rest \
// 		--framework playwright \
// 		--language typescript \
// 		--output ui_test_race-conditions.spec.ts \
// 		--output-dir /Users/syedsky/Skyramp/projects/Atlassian/test-sweet-state/src/tests/ui \
// 		--overwrite true \
// 		--playwright-trace /Users/syedsky/Skyramp/projects/Atlassian/test-sweet-state/traces/race-conditions/skyramp_playwright.zip \
// 		--rawTrace true \

// Import of required libraries
import { test } from '@playwright/test';
import { expect, newSkyrampPlaywrightPage } from '@skyramp/skyramp';

const pageTimeout = 15000;

test('testUi', async ({ page }) => {
    test.setTimeout(71000);
    // set default timeout for all locator/page actions in this test
    page.setDefaultTimeout(pageTimeout);

    // wrap playwright page with Skyramp page
    page = newSkyrampPlaywrightPage(page);

    // Navigate to application and open race conditions test
    await page.goto("http://localhost:4173/");
    await page.getByTestId("test-race-conditions").click();
    
    // Verify initial state shows no posts
    await expect(page.getByTestId("posts-data")).toContainText("Posts: none");
    
    // Trigger race condition: slow fetch followed immediately by fast fetch
    await page.getByTestId("fetch-slow").click();
    await page.getByTestId("fetch-fast").click();
    
    // Verify that the fast response wins (correct race condition handling)
    await expect(page.getByTestId("posts-data")).toContainText("Posts: Fast response data");
});
