// Generated by Skyramp v0.5.0.1c45d2eb on 2025-10-24 15:28:59.085995 -0700 PDT m=+1421.051542709
// Command: skyramp generate ui rest \
// 		--framework playwright \
// 		--language typescript \
// 		--output ui_test_container-props.spec.ts \
// 		--output-dir /Users/syedsky/Skyramp/projects/Atlassian/test-sweet-state/src/tests/ui \
// 		--overwrite true \
// 		--playwright-trace /Users/syedsky/Skyramp/projects/Atlassian/test-sweet-state/traces/container-props/skyramp_playwright.zip \
// 		--rawTrace true \

// Import of required libraries
import { test } from '@playwright/test';
import { expect, newSkyrampPlaywrightPage } from '@skyramp/skyramp';

const pageTimeout = 15000;

/**
 * Verifies the count values for all three multiplier displays
 */
async function verifyAllMultiplierValues(page: any, count1x: number, count2x: number, count5x: number) {
    await expect(page.getByTestId("multiplier-value-1x")).toContainText(`Count: ${count1x}`);
    await expect(page.getByTestId("multiplier-value-2x")).toContainText(`Count: ${count2x}`);
    await expect(page.getByTestId("multiplier-value-5x")).toContainText(`Count: ${count5x}`);
}

/**
 * Increments a specific multiplier counter and verifies the resulting state
 */
async function incrementMultiplierAndVerify(page: any, multiplier: string, count1x: number, count2x: number, count5x: number) {
    await page.getByTestId(`multiplier-increment-${multiplier}`).click();
    await verifyAllMultiplierValues(page, count1x, count2x, count5x);
}

test('testUi', async ({ page }) => {
    test.setTimeout(201000);
    // set default timeout for all locator/page actions in this test
    page.setDefaultTimeout(pageTimeout);

    // wrap playwright page with Skyramp page
    page = newSkyrampPlaywrightPage(page);

    await page.goto("http://localhost:4173/");
    await page.getByTestId("test-container-props").click();
    
    // Verify initial state - all counters at 0
    await verifyAllMultiplierValues(page, 0, 0, 0);
    
    // Increment 1x counter and verify
    await incrementMultiplierAndVerify(page, "1x", 1, 0, 0);
    
    // Increment 2x counter and verify
    await incrementMultiplierAndVerify(page, "2x", 1, 2, 0);
    
    // Increment 5x counter and verify
    await incrementMultiplierAndVerify(page, "5x", 1, 2, 5);
    
    // Increment 2x counter again and verify
    await incrementMultiplierAndVerify(page, "2x", 1, 4, 5);
});
