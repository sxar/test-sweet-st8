// Generated by Skyramp v0.5.0.1c45d2eb on 2025-10-24 15:37:21.084879 -0700 PDT m=+1923.053954209
// Command: skyramp generate ui rest \
// 		--framework playwright \
// 		--language typescript \
// 		--output ui_test_selectors.spec.ts \
// 		--output-dir /Users/syedsky/Skyramp/projects/Atlassian/test-sweet-state/src/tests/ui \
// 		--overwrite true \
// 		--playwright-trace /Users/syedsky/Skyramp/projects/Atlassian/test-sweet-state/traces/selectors/skyramp_playwright.zip \
// 		--rawTrace true

// Import of required libraries
import { test } from '@playwright/test';
import { expect, newSkyrampPlaywrightPage } from '@skyramp/skyramp';

const pageTimeout = 15000;

async function updateField(page, fieldName: string, value: string) {
    await page.getByTestId(`update-${fieldName}-input`).click();
    await page.getByTestId(`update-${fieldName}-input`).fill(value);
    await page.getByTestId(`update-${fieldName}-btn`).click();
}

async function verifyRenderCounts(page, nameRenders: string, ageRenders: string, emailRenders: string) {
    await expect(page.getByTestId("selector-name-renders")).toContainText(`Renders: ${nameRenders}`);
    await expect(page.getByTestId("selector-age-renders")).toContainText(`Renders: ${ageRenders}`);
    await expect(page.getByTestId("selector-email-renders")).toContainText(`Renders: ${emailRenders}`);
}

test('testUi', async ({ page }) => {
    test.setTimeout(192000);
    // set default timeout for all locator/page actions in this test
    page.setDefaultTimeout(pageTimeout);

    // wrap playwright page with Skyramp page
    page = newSkyrampPlaywrightPage(page);

    await page.goto("http://localhost:4173/");
    await page.getByTestId("test-selectors").click();
    
    await verifyRenderCounts(page, "0", "0", "0");
    
    await updateField(page, "name", "Tom");
    await expect(page.getByTestId("selector-name")).toContainText("Tom");
    await verifyRenderCounts(page, "1", "0", "0");
    
    await updateField(page, "age", "25");
    await expect(page.getByTestId("selector-age")).toContainText("25");
    await verifyRenderCounts(page, "1", "1", "0");
});
