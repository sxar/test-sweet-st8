// Generated by Skyramp v0.5.0.1c45d2eb on 2025-10-24 15:07:19.517881 -0700 PDT m=+121.487379126
// Command: skyramp generate ui rest \
// 		--framework playwright \
// 		--language typescript \
// 		--output ui_test_simple-counter.spec.ts \
// 		--output-dir /Users/syedsky/Skyramp/projects/Atlassian/test-sweet-state/src/tests/ui \
// 		--overwrite true \
// 		--playwright-trace /Users/syedsky/Skyramp/projects/Atlassian/test-sweet-state/traces/simple-counter/skyramp_playwright.zip \
// 		--rawTrace true

// Import of required libraries
import { test } from '@playwright/test';
import { expect, newSkyrampPlaywrightPage } from '@skyramp/skyramp';

const pageTimeout = 15000;

// Helper function to increment the counter multiple times
async function incrementCounter(page: any, times: number) {
    for (let i = 0; i < times; i++) {
        await page.getByTestId("global-counter-increment").click();
    }
}

// Helper function to decrement the counter multiple times
async function decrementCounter(page: any, times: number) {
    for (let i = 0; i < times; i++) {
        await page.getByTestId("global-counter-decrement").click();
    }
}

// Helper function to verify the counter value
async function verifyCounterValue(page: any, expectedCount: number) {
    await expect(page.getByTestId("global-counter-value")).toContainText(`Count: ${expectedCount}`);
}

// Helper function to reset the counter
async function resetCounter(page: any) {
    await page.getByTestId("global-counter-reset").click();
}

test('testUi', async ({ page }) => {
    test.setTimeout(152000);
    // set default timeout for all locator/page actions in this test
    page.setDefaultTimeout(pageTimeout);

    // wrap playwright page with Skyramp page
    page = newSkyrampPlaywrightPage(page);

    await page.goto("http://localhost:4173/");
    await page.getByTestId("test-simple-counter").click();
    
    await verifyCounterValue(page, 0);
    await incrementCounter(page, 5);
    await verifyCounterValue(page, 5);
    await decrementCounter(page, 2);
    await verifyCounterValue(page, 3);
    await resetCounter(page);
    await verifyCounterValue(page, 0);
});
