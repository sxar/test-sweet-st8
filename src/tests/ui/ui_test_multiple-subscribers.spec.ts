// Generated by Skyramp v0.5.0.1c45d2eb on 2025-10-24 15:12:28.672154 -0700 PDT m=+430.640712293
// Command: skyramp generate ui rest \
// 		--framework playwright \
// 		--language typescript \
// 		--output ui_test_multiple-subscribers.spec.ts \
// 		--output-dir /Users/syedsky/Skyramp/projects/Atlassian/test-sweet-state/src/tests/ui \
// 		--overwrite true \
// 		--playwright-trace /Users/syedsky/Skyramp/projects/Atlassian/test-sweet-state/traces/multiple-subscribers/skyramp_playwright.zip \
// 		--rawTrace true \

// Import of required libraries
import { test } from '@playwright/test';
import { expect, newSkyrampPlaywrightPage } from '@skyramp/skyramp';

const pageTimeout = 15000;

/**
 * Helper function to verify all shared counters display the same count value
 * This ensures that all subscribers (A, B, C) are synchronized to the same state
 */
async function verifyAllCountersShowValue(page, expectedCount: number) {
    await expect(page.getByTestId("shared-counter-A")).toContainText(`Count: ${expectedCount}`);
    await expect(page.getByTestId("shared-counter-B")).toContainText(`Count: ${expectedCount}`);
    await expect(page.getByTestId("shared-counter-C")).toContainText(`Count: ${expectedCount}`);
}

/**
 * Helper function to increment a specific subscriber's counter and verify all counters are synchronized
 * @param subscriberId - The subscriber ID (A, B, or C) whose increment button to click
 * @param expectedCount - The expected count value after increment
 */
async function incrementSubscriberAndVerify(page, subscriberId: string, expectedCount: number) {
    await page.getByTestId(`shared-increment-${subscriberId}`).click();
    await verifyAllCountersShowValue(page, expectedCount);
}

test('testUi', async ({ page }) => {
    test.setTimeout(171000);
    // set default timeout for all locator/page actions in this test
    page.setDefaultTimeout(pageTimeout);

    // wrap playwright page with Skyramp page
    page = newSkyrampPlaywrightPage(page);

    await page.goto("http://localhost:4173/");
    await page.getByTestId("test-multiple-subscribers").click();
    
    // Verify initial state: all counters start at 0
    await verifyAllCountersShowValue(page, 0);
    
    // Increment from subscriber A and verify all counters sync to 1
    await incrementSubscriberAndVerify(page, "A", 1);
    
    // Increment from subscriber B and verify all counters sync to 2
    await incrementSubscriberAndVerify(page, "B", 2);
    
    // Increment from subscriber C and verify all counters sync to 3
    await incrementSubscriberAndVerify(page, "C", 3);
});
